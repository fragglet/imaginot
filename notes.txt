
Two files:
	For these, the c: gets replaced according to -d parameter.

	COMM_FILE  "c:sopwith?.dta" /*  Multi user communications file  */
		- ? gets replaced with 0-9 based on game number chosen
	COMM_CMD   "c:semaphor\0   "/*  Multi-user semaphor file        */

Startup procedure:
	multopen:
		bopen("c:")
		name_to_sec:
			make_bpb:
				bseek to 0
				bread 512 bytes (1 block)
				fill bpb struct from block
			get_ent:
				lookup:
					reads a series of blocks, starting from
					location defined by bpb. each is
					interpreted as a dirent. we look for a
					file with name matching target.
					populates a dirent when found
			clu_to_sec:
				dirent.dc contained cluster; we map this to
				a sector, taking bpb fields into account
			sectparm:
				call int 21h fn 44h subfn 04h (read)
				check for signature 0x4003
				calculate multaddr, multdriv, multhead

		comm{driv,head,trk,sect,asect} get calculated for command
		(semaphore) file while mult* versions for communication file

		- repeat of multopen bopen() for COMM_FILE drive
			calculate multaddr, multdriv, multhead, multdriv

		_dkioset
			setting up interrupts
		try 25 times to multread:
			bseek to semaphore sector, bread
			check first byte == 0xfe
			bseek to semaphore sector, bwrite
			set first byte to 0xff
			bseek to semaphore sector, bread
			check first byte == 0xff now
			bseek to comms sector, bread into multbuff
			

			


During gameplay:

	swmove() calls multput()
	 - does both read and write, stop and go synchronized between players
	
	multput -> _multput:
		updated(0, player):
			Blocks until players 0...player-1 ready
			"ready" means in FINISHED state
			we repeatedly call _dkio() to read from disk
				calls int 13h function 2

		now we're ready to write our ticcmd
		swgetc() to read ticcmd
		written to mu->mu_key[player]
		mu->mu_lstplyr is set to player

		_dkio() writes buffer containing ticcmd
			calls int 13h function 3

		updated(player + 1, mu->mu_maxplyr)
			- blocks until all other players have also written


dkio internals:
	basically an implementation of coroutines where a background process
	is started that can be paused to block until an amount of time has
	passed or an interrupt has been received

	_dkproc:
		starts a background coroutine; switches stack and then invokes
		the function passed as an argument.
		dkiosts is changed to DKINPROC while the coroutine is active
		and then changes back to DKIDLE when complete
	_dktick:
		suspends the current coroutine until a timer has expired
		tickcount saves the number of ticks to wait
		dkiosts is changed to DKTICK until timer expires
		switches back to normal stack and returns thru eg. _dkproc
		(or whatever was happening when the last interrupt suspended
		the normal process)
	_dktckint:
		ISR invoked by timer interrupt
		decrements tickcount
		once it reaches zero, _dkresume is invoked
	_dkresume:
		called internally by other _dkio code
		switches stacks and restarts coroutine
	_dkwait:
		called internally by interrupt code
		sets dkiosts to DKWAIT to block until an interrupt is rxed
		switches back to normal stack, returns to whatever the
		normal code was doing
	_dkioset (setup):
		sets int 0Eh (IRQ6 = disk controller) to _dkhrdint
		sets int 13h (BIOS API) to _dksftint
		sets int 1Ch (system timer tick) to _dktckint
	_dksftint:
		13h BIOS interrupt wrapper
		1. busy loop if interrupt rxed, if currenly waiting
		2. in case of DKINPROC (coroutine active), we invoke special
		   code. all swmultio _dkio calls happen inside coroutine
		3. special code (labels bg2, bg3, bg4) handle BIOS 13h
		   interrupt calls for read, write, verify, format, status
		4. rdwrvr handles read/write (the one we care about most)
		5. normal code path: rdwrvr -> rwv1 -> rwv2 -> nsp1
		6. waitwrun uses _dkwait to wait to block until interrupt
		7. _dkhrdint calls _dkresume to contine 13h call. motor now on
		8. sk4 -> return to caller

Decompiled SWMULTIO format for sopwith2.exe (doesn't match released src):

 @0x7cb                                    int off
        unsigned mu_maxplyr;
        unsigned mu_numplyr;               +1
        unsigned mu_lstplyr;               +2
        unsigned mu_key[MAX_PLYR];         +3      <- should be MAX_PLYR*2 ?
        unsigned mu_state[MAX_PLYR];       +11     <- doesn't match
        unsigned mu_explseed;              +15
        ^^ should all be byte fields

Sopwith 1 version:

        unsigned mu_maxplyr;
        unsigned mu_numplyr;
        unsigned unknown1;
        unsigned unknown2;
        unsigned mu_key[MAX_PLYR];             +0x08
        unsigned mu_unknown[MAX_PLYR];         +0x10
        unsigned mu_state[MAX_PLYR];           +0x18




          if ( first = !mu->mu_numplyr ) {
                mu->mu_maxplyr = getmaxplyr();
                mu->mu_numplyr = 0;
                mu->mu_explseed = explseed;
  if ((uVar4 ^ 1) != 0) {
    piVar2[2] = 0;              ?
    iVar5 = getmaxplyr();
    *piVar2 = iVar5;            mu->mu_maxplyr = getmaxplyr();
    iVar5 = FUN_1000_2363();
    piVar2[3] = iVar5;          ?
    piVar2[1] = 0;              mu->mu_numplyr = 0;
  }

  *(int *)0x38eb = piVar2[2] * 0x76 + 0x97d;
  *(int *)0x38e9 = piVar2[3];
  if (*piVar2 <= piVar2[1]) {          if ( mu->mu_numplyr >= mu->mu_maxplyr )
    swend(0x37f,0);                       swend( "Mamimum number of players already playing", NO );
  }
  piVar1 = piVar2 + 1;
  *piVar1 = *piVar1 + 1;               ++mu->mu_numplyr;

      piVar1[local_8 + 8] = 0;
      piVar1[local_8 + 4] = 0;             mu->mu_key[n] = 0;
      piVar1[local_8 + 0xc] = 1;           mu->mu_state[n] = FLYING;

                        mu->mu_key[n] = 0;
                        mu->mu_state[n] = FLYING;
                        mu->mu_lstplyr = n;


        *(undefined2 *)(*(int *)0x868 + 0x18 + *(int *)0x9867 * 2) = 3;     multbuff->mu_state[player] = FINISHED;
        *(undefined2 *)(*(int *)0x868 + 0x10 + *(int *)0x9867 * 2) = 0;
        *(undefined2 *)(*(int *)0x868 + 8 + *(int *)0x9867 * 2) = 0;        multbuff->mu_key[player] = 0;
        bVar1 = true;
